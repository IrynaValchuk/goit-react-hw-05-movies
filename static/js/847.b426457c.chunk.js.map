{"version":3,"file":"static/js/847.b426457c.chunk.js","mappings":"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","sources":["pages/MovieDetails.js","constants/api.js","helpers/transformMovies.js","services/movies-api.js","helpers/transformMovie.js","helpers/transformMovieCast.js","helpers/transformMovieReviews.js"],"sourcesContent":["import { useEffect, useRef, useState, Suspense } from 'react';\nimport {\n  Link,\n  NavLink,\n  Outlet,\n  useLocation,\n  useParams,\n} from 'react-router-dom';\nimport { getMovieById } from 'services';\nimport { Loader } from 'components';\nimport defaultImg from 'images/default-img.jpg';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [{ title, poster_path, genres, overview, rating }, setMovie] = useState(\n    []\n  );\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  useEffect(() => {\n    (async () => {\n      const movie = await getMovieById(movieId);\n      setMovie(movie);\n    })().catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <div className=\"container\">\n      <Link to={backLinkLocationRef.current} className=\"btn\">\n        Go back\n      </Link>\n      <div className=\"box\">\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : defaultImg\n          }\n          width=\"350px\"\n          height=\"500px\"\n          alt={title}\n        />\n        <div className=\"wrap\">\n          <h2>{title}</h2>\n          <p>\n            <span>User Score: </span>\n            {Math.round(rating * 10)}%\n          </p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <ul className=\"listGenres\">\n            {genres && genres.map(({ id, name }) => <li key={id}>{name}</li>)}\n          </ul>\n        </div>\n      </div>\n      <h3>Additional information</h3>\n      <ul className=\"listSub\">\n        <li>\n          <NavLink to=\"cast\" className=\"linkSub\">\n            Cast\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\" className=\"linkSub\">\n            Reviews\n          </NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '01293fbdb6ddf6c5485f2ddd9eccd7b8';\n\nexport { BASE_URL, API_KEY };\n","export const transformMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from 'constants';\nimport {\n  transformMovies,\n  transformMovie,\n  transformMovieCast,\n  transformMovieReviews,\n} from 'helpers';\n\nexport const getPopularMovies = async () => {\n  return await axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovies(data.results));\n};\n\nexport const getSearchMovie = async movieName => {\n  return await axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${movieName}`)\n    .then(({ data }) => transformMovies(data.results));\n};\n\nexport const getMovieById = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovie(data));\n};\n\nexport const getMovieCast = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovieCast(data.cast));\n};\n\nexport const getMovieReviews = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovieReviews(data.results));\n};\n","export const transformMovie = ({\n  title,\n  poster_path,\n  genres,\n  overview,\n  vote_average,\n}) => ({\n  title,\n  poster_path,\n  genres,\n  overview,\n  rating: vote_average,\n});\n","export const transformMovieCast = cast => {\n  return cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    name,\n    character,\n    profile_path,\n  }));\n};\n","export const transformMovieReviews = reviews => {\n  return reviews.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n"],"names":["movieId","useParams","useState","title","poster_path","genres","overview","rating","setMovie","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieById","movie","catch","error","console","log","className","to","current","src","defaultImg","width","height","alt","Math","round","map","id","name","Suspense","fallback","BASE_URL","API_KEY","transformMovies","movies","getPopularMovies","axios","then","data","results","getSearchMovie","movieName","vote_average","getMovieCast","cast","character","profile_path","getMovieReviews","author","content"],"sourceRoot":""}
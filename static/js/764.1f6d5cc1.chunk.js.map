{"version":3,"file":"static/js/764.1f6d5cc1.chunk.js","mappings":"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","sources":["pages/Movies.js","constants/api.js","helpers/transformMovies.js","services/movies-api.js","helpers/transformMovie.js","helpers/transformMovieCast.js","helpers/transformMovieReviews.js"],"sourcesContent":["import { getSearchMovie } from 'services/movies-api';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components';\nimport defaultImg from 'images/default-img.jpg';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [movieValue, setMovieValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const movieName = searchParams.get('movieName') ?? '';\n\n  const handleChangeInput = evt => {\n    const movieValue = evt.target.value;\n    setMovieValue(movieValue);\n  };\n  \n  const handleSubmitForm = evt => {\n    evt.preventDefault();\n    if (movieValue === '') {\n      toast.error(`Please enter a value`);\n      return;\n    }\n    setSearchParams({ movieName: movieValue });\n  };\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n    (async () => {\n      setIsLoading(true);\n      const result = await getSearchMovie(movieName);\n      if (result.length === 0) {\n        toast.error(\n          `Sorry, there are no movies matching your search query. Please try again.`\n        );\n        setSearchParams({});\n        setMovies([]);\n        setMovieValue('');\n        return;\n      }\n      setMovies(result);\n    })()\n      .catch(error => toast.error(`${error.message}`))\n      .finally(() => setIsLoading(false));\n  }, [movieName, setSearchParams]);\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSubmitForm} className=\"searchForm\">\n        <input\n          type=\"text\"\n          value={movieValue}\n          className=\"searchFormInput\"\n          placeholder=\"Search movies\"\n          onChange={handleChangeInput}\n        />\n        <button type=\"submit\" className=\"searchFormButton\">\n          Search\n        </button>\n      </form>\n      {isLoading && <Loader />}\n      <ul className=\"list\">\n        {movies.map(({ id, title, poster_path }) => (\n          <li key={id} className=\"item\">\n            <Link className=\"link\" to={`${id}`} state={{ from: location }}>\n              <img\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n                    : defaultImg\n                }\n                width=\"350px\"\n                height=\"500px\"\n                alt={title}\n              />\n              <p className=\"subTitle\">{title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '01293fbdb6ddf6c5485f2ddd9eccd7b8';\n\nexport { BASE_URL, API_KEY };\n","export const transformMovies = movies => {\n  return movies.map(({ id, title, poster_path }) => ({\n    id,\n    title,\n    poster_path,\n  }));\n};\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from 'constants';\nimport {\n  transformMovies,\n  transformMovie,\n  transformMovieCast,\n  transformMovieReviews,\n} from 'helpers';\n\nexport const getPopularMovies = async () => {\n  return await axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovies(data.results));\n};\n\nexport const getSearchMovie = async movieName => {\n  return await axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${movieName}`)\n    .then(({ data }) => transformMovies(data.results));\n};\n\nexport const getMovieById = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovie(data));\n};\n\nexport const getMovieCast = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovieCast(data.cast));\n};\n\nexport const getMovieReviews = async movieId => {\n  return await axios\n    .get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`)\n    .then(({ data }) => transformMovieReviews(data.results));\n};\n","export const transformMovie = ({\n  title,\n  poster_path,\n  genres,\n  overview,\n  vote_average,\n}) => ({\n  title,\n  poster_path,\n  genres,\n  overview,\n  rating: vote_average,\n});\n","export const transformMovieCast = cast => {\n  return cast.map(({ id, name, character, profile_path }) => ({\n    id,\n    name,\n    character,\n    profile_path,\n  }));\n};\n","export const transformMovieReviews = reviews => {\n  return reviews.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n"],"names":["useState","movies","setMovies","movieValue","setMovieValue","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","movieName","get","useEffect","getSearchMovie","result","length","toast","catch","error","message","finally","className","onSubmit","evt","preventDefault","type","value","placeholder","onChange","target","map","id","title","poster_path","to","state","from","src","defaultImg","width","height","alt","BASE_URL","API_KEY","transformMovies","getPopularMovies","axios","then","data","results","getMovieById","movieId","genres","overview","rating","vote_average","getMovieCast","cast","name","character","profile_path","getMovieReviews","author","content"],"sourceRoot":""}